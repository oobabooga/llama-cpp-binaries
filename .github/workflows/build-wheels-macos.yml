name: Build MacOS Wheels

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag of llama-cpp-binaries to build: v0.1.0'
        default: 'v0.1.0'
        required: true
        type: string
      config:
        description: 'Override configurations to build: key1:item1-1,item1-2;key2:item2-1,item2-2'
        default: 'Default'
        required: false
        type: string
      exclude:
        description: 'Exclude build configurations: key1-1:item1-1,key1-2:item1-2;key2-1:item2-1,key2-2:item2-2'
        default: 'None'
        required: false
        type: string
  workflow_call:
    inputs:
      version:
        description: 'Version tag of llama-cpp-binaries to build: v0.1.0'
        default: 'v0.1.0'
        required: true
        type: string
      config:
        description: 'Configurations to build: key1:item1-1,item1-2;key2:item2-1,item2-2'
        default: 'Default'
        required: false
        type: string
      exclude:
        description: 'Exclude build configurations: key1-1:item1-1,key1-2:item1-2;key2-1:item2-1,key2-2:item2-2'
        default: 'None'
        required: false
        type: string

permissions:
  contents: write

jobs:
  define_matrix:
    name: Define Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    defaults:
      run:
        shell: pwsh
    env:
      CONFIGIN: ${{ inputs.config }}
      EXCLUDEIN: ${{ inputs.exclude }}

    steps:
      - name: Define Job Output
        id: set-matrix
        run: |
          $matrix = @{
              'os' = @("macos-13", "macos-14", "macos-15")
              'pyver' = @("3.11")
          }

          if ($env:CONFIGIN -ne 'Default') {$env:CONFIGIN.split(';').foreach({$matrix[$_.split(':')[0]] = $_.split(':')[1].split(',')})}

          if ($env:EXCLUDEIN -ne 'None') {
              $exclusions = @()
              $exclusions += $env:EXCLUDEIN.split(';').replace(':','=').replace(',',"`n") | ConvertFrom-StringData
              $matrix['exclude'] = $exclusions
          }

          $matrixOut = ConvertTo-Json $matrix -Compress
          Write-Output ('matrix=' + $matrixOut) >> $env:GITHUB_OUTPUT

  build_wheels:
    name: ${{ matrix.os }} Python ${{ matrix.pyver }}
    needs: define_matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.define_matrix.outputs.matrix) }}
    env:
      OSVER: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'oobabooga/llama-cpp-binaries'
          ref: ${{ inputs.version }}
          submodules: 'recursive'

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.pyver }}

      - name: Install Dependencies
        run: |
          python -m pip install build cmake

      - name: Build Wheel
        run: |
          # Find the actual Xcode path once
          XCODE_PATH=$(ls -d /Applications/Xcode*.app | head -1)
          echo "Using Xcode at: ${XCODE_PATH}"
          XCODEDEV="${XCODE_PATH}/Contents/Developer"
          XCODEBINPATH="${XCODEDEV}/Toolchains/XcodeDefault.xctoolchain/usr/bin"

          # Set common arguments
          export CMAKE_ARGS="-DGGML_NATIVE=off -DLLAMA_CURL=OFF -DGGML_METAL=on -DGGML_METAL_EMBED_LIBRARY=on"

          # Always set the SDK root to avoid 'System' library not found errors
          export SDKROOT="${XCODEDEV}/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"

          # Set correct compiler paths
          export CC="${XCODEBINPATH}/cc"
          export CXX="${XCODEBINPATH}/c++"

          # Set deployment target based on OS version
          [[ "$OSVER" == "macos-15" ]] && export MACOSX_DEPLOYMENT_TARGET="15.0"
          [[ "$OSVER" == "macos-14" ]] && export MACOSX_DEPLOYMENT_TARGET="14.0"
          [[ "$OSVER" == "macos-13" ]] && export MACOSX_DEPLOYMENT_TARGET="13.0"
          [[ "$OSVER" == "macos-12" ]] && export MACOSX_DEPLOYMENT_TARGET="12.0"
          [[ "$OSVER" == "macos-11" ]] && export MACOSX_DEPLOYMENT_TARGET="11.0"

          # ARM64 build
          echo "Building for arm64 architecture"
          export CMAKE_OSX_ARCHITECTURES="arm64" && export ARCHFLAGS="-arch arm64"
          VERBOSE=1 python -m build --wheel

          # Rename universal2 wheels to arm64 and create aarch64 copies
          for file in ./dist/*universal2.whl; do
            # Rename to arm64 version
            arm64_file="${file/universal2/arm64}"
            mv "$file" "$arm64_file"
            # Create aarch64 copy
            cp "$arm64_file" "${arm64_file/arm64/aarch64}"
          done

          # Explicitly reset the SDK path for the second build
          export SDKROOT="${XCODEDEV}/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk"

          # x86_64 build with specific flags
          echo "Building for x86_64 architecture"
          export CMAKE_OSX_ARCHITECTURES="x86_64"
          export CMAKE_ARGS="-DGGML_NATIVE=off -DGGML_AVX=off -DGGML_AVX2=off -DGGML_FMA=off -DGGML_F16C=off -DGGML_METAL=on -DGGML_METAL_EMBED_LIBRARY=on"
          export ARCHFLAGS="-arch x86_64"
          VERBOSE=1 python -m build --wheel

          # Rename universal2 wheels to x86_64
          for file in ./dist/*universal2.whl; do
            mv "$file" "${file/universal2/x86_64}"
          done

      - name: Upload files to a GitHub release
        id: upload-release
        uses: svenstaro/upload-release-action@2.7.0
        continue-on-error: true
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./dist/*.whl
          tag: ${{ inputs.version }}
          file_glob: true
          make_latest: false
          overwrite: true

      - uses: actions/upload-artifact@v4
        if: steps.upload-release.outcome == 'failure'
        with:
          name: macos-wheels
          path: ./dist/*.whl
