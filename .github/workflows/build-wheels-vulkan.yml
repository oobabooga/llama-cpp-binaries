name: Build Vulkan Wheels

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag of llama-cpp-binaries to build: v0.1.0'
        default: 'v0.1.0'
        required: true
        type: string
      config:
        description: 'Override configurations to build: key1:item1-1,item1-2;key2:item2-1,item2-2'
        default: 'Default'
        required: false
        type: string
      exclude:
        description: 'Exclude build configurations: key1-1:item1-1,key1-2:item1-2;key2-1:item2-1,key2-2:item2-2'
        default: 'None'
        required: false
        type: string
  workflow_call:
    inputs:
      version:
        description: 'Version tag of llama-cpp-binaries to build: v0.1.0'
        default: 'v0.1.0'
        required: true
        type: string
      config:
        description: 'Configurations to build: key1:item1-1,item1-2;key2:item2-1,item2-2'
        default: 'Default'
        required: false
        type: string
      exclude:
        description: 'Exclude build configurations: key1-1:item1-1,key1-2:item1-2;key2-1:item2-1,key2-2:item2-2'
        default: 'None'
        required: false
        type: string

permissions:
  contents: write

jobs:
  define_matrix:
    name: Define Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    defaults:
      run:
        shell: pwsh
    env:
      CONFIGIN: ${{ inputs.config }}
      EXCLUDEIN: ${{ inputs.exclude }}

    steps:
      - name: Define Job Output
        id: set-matrix
        run: |
          $matrix = @{
              'os' = @('ubuntu-22.04', 'windows-2019')
              'pyver' = @("3.11")
              'avxver' = @("AVX2", "AVX")
          }

          if ($env:CONFIGIN -ne 'Default') {$env:CONFIGIN.split(';').foreach({$matrix[$_.split(':')[0]] = $_.split(':')[1].split(',')})}

          if ($env:EXCLUDEIN -ne 'None') {
              $exclusions = @()
              $exclusions += $env:EXCLUDEIN.split(';').replace(':','=').replace(',',"`n") | ConvertFrom-StringData
              $matrix['exclude'] = $exclusions
          }

          $matrixOut = ConvertTo-Json $matrix -Compress
          Write-Output ('matrix=' + $matrixOut) >> $env:GITHUB_OUTPUT

  build_wheels:
    name: Build Wheel ${{ matrix.os }} ${{ matrix.pyver }} Vulkan ${{ matrix.avxver }}
    needs: define_matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.define_matrix.outputs.matrix) }}
    defaults:
      run:
        shell: pwsh
    env:
      AVXVER: ${{ matrix.avxver }}
      PCKGVER: ${{ inputs.version }}
      VULKAN_VERSION: 1.4.309.0

    steps:
      - name: Add MSBuild to PATH
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.1
        with:
          vs-version: '[16.11,16.12)'

      - uses: actions/checkout@v4
        with:
          repository: 'oobabooga/llama-cpp-binaries'
          ref: ${{ inputs.version }}
          submodules: 'recursive'

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.pyver }}

      - name: Setup Mamba
        uses: conda-incubator/setup-miniconda@v3.1.0
        with:
          activate-environment: "TGW"
          python-version: ${{ matrix.pyver }}
          miniforge-version: latest
          add-pip-as-python-dependency: true
          auto-activate-base: false

      # Install Vulkan SDK on Windows
      - name: Install Vulkan SDK (Windows)
        if: runner.os == 'Windows'
        run: |
          curl.exe -o $env:RUNNER_TEMP/VulkanSDK-Installer.exe -L "https://sdk.lunarg.com/sdk/download/${env:VULKAN_VERSION}/windows/VulkanSDK-${env:VULKAN_VERSION}-Installer.exe"
          & "$env:RUNNER_TEMP\VulkanSDK-Installer.exe" --accept-licenses --default-answer --confirm-command install
          Add-Content $env:GITHUB_ENV "VULKAN_SDK=C:\VulkanSDK\${env:VULKAN_VERSION}"
          Add-Content $env:GITHUB_PATH "C:\VulkanSDK\${env:VULKAN_VERSION}\bin"

      # Install Vulkan SDK on Linux
      - name: Install Vulkan SDK (Linux)
        if: runner.os == 'Linux'
        run: |
          if ($IsLinux) {
            bash -c "wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -"
            bash -c "sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-jammy.list https://packages.lunarg.com/vulkan/lunarg-vulkan-jammy.list"
            bash -c "sudo apt-get update -y"
            bash -c "sudo apt-get install -y build-essential mesa-vulkan-drivers vulkan-sdk libcurl4-openssl-dev"
          }

      - name: Install Dependencies
        run: |
          python -m pip install build

      - name: Build Wheel
        run: |
          $packageVersion = [version]$env:PCKGVER.TrimStart('v')
          $env:VERBOSE = '1'
          $env:CMAKE_ARGS = '-DGGML_VULKAN=on'
          $env:CMAKE_ARGS = "-DGGML_NATIVE=off $env:CMAKE_ARGS"
          if ($env:AVXVER -eq 'AVX') {$env:CMAKE_ARGS = $env:CMAKE_ARGS + ' -DGGML_AVX2=off -DGGML_FMA=off -DGGML_F16C=off'; $cputag = 'avx'}
          if ($env:AVXVER -eq 'basic') {$env:CMAKE_ARGS = $env:CMAKE_ARGS + ' -DGGML_AVX=off -DGGML_AVX2=off -DGGML_FMA=off -DGGML_F16C=off'; $cputag = 'basic'}

          # Set Vulkan SDK path for Windows
          if ($IsWindows) {
            $env:CMAKE_ARGS = "-DCMAKE_PREFIX_PATH=$env:VULKAN_SDK $env:CMAKE_ARGS"
          }

          $env:LLAMA_CPP_BUILD_JOBS = "2"

          # Create bin directory for any dependent libraries
          $binDir = "llama_cpp_binaries/bin"
          New-Item -ItemType Directory -Path $binDir -Force | Out-Null

          # Copy Vulkan libraries if needed
          # Note: Unlike CUDA, Vulkan libraries are usually found by the OS's dynamic linker
          # so we don't typically need to package the libraries with the wheel

          # Use vulkan tag instead of cuda tag
          $buildtag = "+vulkan$cputag"
          python -m build --wheel -C--build-option=egg_info "-C--build-option=--tag-build=$buildtag"

      - name: Upload files to a GitHub release
        id: upload-release
        uses: svenstaro/upload-release-action@2.7.0
        continue-on-error: true
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./dist/*.whl
          tag: ${{ inputs.version }}
          file_glob: true
          make_latest: false
          overwrite: true

      - uses: actions/upload-artifact@v4
        if: steps.upload-release.outcome == 'failure'
        with:
          name: textgen-webui-wheels
          path: ./dist/*.whl
